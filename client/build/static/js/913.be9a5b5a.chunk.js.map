{"version":3,"file":"static/js/913.be9a5b5a.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/DialogActions/dialogActionsClasses.js","../node_modules/@mui/material/DialogActions/DialogActions.js","components/animate/ConFirmDialog.js","services/TermsService.js","redux/Terms/actions.js","sections/Terms/TermsForm.js","sections/Terms/Terms.js","pages/TermsPage.js","sections/mui/data-grid/DataGridBasic.js","../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","../node_modules/@hookform/resolvers/src/toNestError.ts","../node_modules/@hookform/resolvers/yup/src/yup.ts"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getDialogActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogActions', slot);\n}\nconst dialogActionsClasses = generateUtilityClasses('MuiDialogActions', ['root', 'spacing']);\nexport default dialogActionsClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"disableSpacing\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getDialogActionsUtilityClass } from './dialogActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disableSpacing\n  } = ownerState;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getDialogActionsUtilityClass, classes);\n};\nconst DialogActionsRoot = styled('div', {\n  name: 'MuiDialogActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8,\n  justifyContent: 'flex-end',\n  flex: '0 0 auto'\n}, !ownerState.disableSpacing && {\n  '& > :not(style) ~ :not(style)': {\n    marginLeft: 8\n  }\n}));\nconst DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDialogActions'\n  });\n  const {\n      className,\n      disableSpacing = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disableSpacing\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogActions.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogActions;","import PropTypes from 'prop-types';\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Typography, Button } from '@mui/material';\r\n\r\nexport default function ConfirmDialog(props) {\r\n  const { confirmDialog, setConfirmDialog } = props;\r\n  return (\r\n    <Dialog open={confirmDialog.isOpen}>\r\n      <DialogTitle>{confirmDialog.title}</DialogTitle>\r\n      <DialogContent>\r\n        <Typography variant=\"h6\">{confirmDialog.subTitle}</Typography>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })}>No</Button>\r\n        <Button onClick={confirmDialog.onConfirm}>Yes</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nConfirmDialog.propTypes = {\r\n  confirmDialog: PropTypes.shape({\r\n    isOpen: PropTypes.bool.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    subTitle: PropTypes.string.isRequired,\r\n    onConfirm: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  setConfirmDialog: PropTypes.func.isRequired,\r\n};\r\n\r\n","import ApiService from \"./ApiService\";\r\nimport { API_URL } from \"./AxiosInterceptor\";\r\n\r\nconst termsURL = `${API_URL}terms/`;\r\n\r\nexport const fetchTermsData = (options = null) => ApiService.get(termsURL, options);\r\n\r\nexport const addTermsData = (data, options = null) => ApiService.post(termsURL, data, options);\r\n\r\nexport const updateTermsData = (id, data, options = null) => ApiService.put(`${termsURL}${id}`, data, options);\r\n\r\nexport const deleteTermsData = (id, options = null) => ApiService.Delete(`${termsURL}${id}`, options);\r\n","import {\r\n    addTermsData,\r\n    deleteTermsData,\r\n    fetchTermsData,\r\n    updateTermsData,\r\n  } from '../../services/TermsService';\r\n  import {\r\n    addTermsSuccess,\r\n    deleteTermsSuccess,\r\n    fetchTermsError,\r\n    fetchTermsSuccess,\r\n    operationError,\r\n    setLoading,\r\n    updateTermsSuccess,\r\n  } from './Terms';\r\n  \r\n  export const fetchTerms = () => (dispatch) => {\r\n    dispatch(setLoading());\r\n    fetchTermsData()\r\n      .then((res) => {\r\n        dispatch(fetchTermsSuccess(res.data));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(fetchTermsError(error.message));\r\n      });\r\n  };\r\n  \r\n  export const addTerms = (data) => (dispatch) => {\r\n    dispatch(setLoading());\r\n    addTermsData(data)\r\n      .then((res) => {\r\n        dispatch(addTermsSuccess(res.data));\r\n        dispatch(fetchTerms());\r\n      })\r\n      .catch((error) => {\r\n        dispatch(operationError(error.message));\r\n      });\r\n  };\r\n  \r\n  export const updateTerms = (id, data) => (dispatch) => {\r\n    dispatch(setLoading());\r\n    updateTermsData(id, data)\r\n      .then((res) => {\r\n        dispatch(updateTermsSuccess(res.data));\r\n        dispatch(fetchTerms());\r\n      })\r\n      .catch((error) => {\r\n        dispatch(operationError(error.message));\r\n      });\r\n  };\r\n  \r\n  export const deleteTerms = (id) => (dispatch) => {\r\n    dispatch(setLoading());\r\n    deleteTermsData(id)\r\n      .then(() => {\r\n        dispatch(deleteTermsSuccess(id));\r\n        dispatch(fetchTerms());\r\n      })\r\n      .catch((error) => {\r\n        dispatch(operationError(error.message));\r\n      });\r\n  };\r\n  ","import { yupResolver } from '@hookform/resolvers/yup';\r\nimport { Button, Stack } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as Yup from 'yup';\r\nimport { DialogAnimate } from '../../components/animate';\r\nimport {  RHFTextField } from '../../components/hook-form';\r\nimport FormProvider from '../../components/hook-form/FormProvider';\r\nimport { updateTerms, addTerms } from '../../redux/Terms/actions';\r\n\r\nconst Schema = Yup.object().shape({\r\n  title: Yup.string().required('Title is required'),\r\n  content: Yup.string().required('Content is required'),\r\n});\r\n\r\nconst TermsForm = ({ handleClose, currentRow }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const defaultValues = {\r\n    title: currentRow?.title || '',\r\n    content: currentRow?.content || '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(Schema),\r\n    defaultValues,\r\n  });\r\n\r\n  const { handleSubmit, reset, formState: { isSubmitting } } = methods;\r\n\r\n  const onSubmit = async (values) => {\r\n    console.log(currentRow._id)\r\n    if (currentRow._id) {\r\n      dispatch(updateTerms(currentRow._id, values));\r\n    } else {\r\n      dispatch(addTerms(values));\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <DialogAnimate open onClose={handleClose} title=\"Terms Form\">\r\n      <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n        <Stack spacing={3} p={3}>\r\n          <RHFTextField name=\"title\" label=\"Title\" fullWidth />\r\n          <RHFTextField name=\"content\" label=\"Content\" fullWidth multiline rows={4} />\r\n        </Stack>\r\n        <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\" p={3}>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n            Save\r\n          </Button>\r\n        </Stack>\r\n      </FormProvider>\r\n    </DialogAnimate>\r\n  );\r\n};\r\n\r\nTermsForm.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  currentRow: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default TermsForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Box, Button } from '@mui/material';\r\nimport TermsForm from './TermsForm';\r\nimport DataGridBasic from '../mui/data-grid/DataGridBasic';\r\nimport Iconify from '../../components/iconify';\r\nimport { fetchTerms, deleteTerms } from '../../redux/Terms/actions';\r\nimport ConfirmDialog from '../../components/animate/ConFirmDialog';\r\n\r\nconst initialValues = {\r\n  _id: '',\r\n  title: '',\r\n  content: '',\r\n  createdAt: \"\",\r\n  updatedAt: \"\"\r\n};\r\n\r\nconst Terms = () => {\r\n  const [currentRow, setCurrentRow] = useState(initialValues);\r\n  const [termsData, setTermsData] = useState([]);\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const [confirmDialog, setConfirmDialog] = useState({\r\n    isOpen: false,\r\n    title: '',\r\n    subTitle: '',\r\n  });\r\n\r\n  const terms = useSelector((state) => state.terms.terms);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTerms());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (terms && terms.length > 0) {\r\n      const formattedData = terms.map((item) => ({\r\n        id: item._id,\r\n        _id:item._id,\r\n        title: item.title,\r\n        content: item.content,\r\n        createdAt: item.createdAt,\r\n        updatedAt: item.updatedAt,\r\n      }));\r\n      setTermsData(formattedData);\r\n    }\r\n  }, [terms]);\r\n\r\n  const handleClose = () => {\r\n    setIsModelOpen(false);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setIsModelOpen(true);\r\n    setCurrentRow(initialValues);\r\n  };\r\n\r\n  const TermsColumn = [\r\n    { field: 'title', headerName: 'Title', width: 350 },\r\n    { field: 'content', headerName: 'Content', width: 350 },\r\n    { field: 'createdAt', headerName: 'Created At', width: 200 },\r\n    { field: 'updatedAt', headerName: 'Updated At', width: 200 },\r\n    {\r\n      field: 'action',\r\n      headerName: 'Action',\r\n      width: 100,\r\n      renderCell: ({ row }) => (\r\n        <strong>\r\n          <Iconify icon=\"akar-icons:edit\" onClick={handleEditClick(row)} />\r\n          <Iconify icon=\"ant-design:delete-outlined\" onClick={handleDeleteClick(row)} />\r\n        </strong>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const onDelete = (row) => {\r\n    setConfirmDialog({ ...confirmDialog, isOpen: false });\r\n    dispatch(deleteTerms(row._id));\r\n    setIsModelOpen(false);\r\n  };\r\n\r\n  const handleDeleteClick = (row) => (event) => {\r\n    event.stopPropagation();\r\n    setConfirmDialog({\r\n      isOpen: true,\r\n      title: 'Are you sure you want to delete this record?',\r\n      subTitle: \"You can't undo this operation\",\r\n      onConfirm: () => onDelete(row),\r\n    });\r\n  };\r\n\r\n  const handleEditClick = (row) => (event) => {\r\n    event.stopPropagation();\r\n    setCurrentRow(row);\r\n    setIsModelOpen(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box display=\"flex\" justifyContent=\"flex-end\" p={1}>\r\n        <Button type=\"button\" onClick={handleClickOpen} className=\"add-btn\">\r\n          Add Terms\r\n        </Button>\r\n      </Box>\r\n      <div className=\"main-table\">\r\n        {termsData.length > 0 && (\r\n          <DataGridBasic data={termsData} columns={TermsColumn} getRowId={(row) => row.id} />\r\n        )}\r\n      </div>\r\n      {isModelOpen && <TermsForm handleClose={handleClose} currentRow={currentRow} />}\r\n      {confirmDialog && (\r\n        <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Terms;\r\n","import { Box, Card, CardHeader, Container, Stack } from '@mui/material';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { useSettingsContext } from '../components/settings';\r\nimport Terms from '../sections/Terms/Terms';\r\n\r\nexport default function TermsPage() {\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Page Six </title>\r\n      </Helmet>\r\n      <Container maxWidth={themeStretch ? false : 'xl'}>\r\n        <Stack spacing={5}>\r\n          <Card>\r\n            <CardHeader title=\"Custom\" sx={{ mb: 2 }} />\r\n            <Box sx={{ height: 390 }}>\r\n              <Terms />\r\n            </Box>\r\n          </Card>\r\n        </Stack>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\nimport PropTypes from 'prop-types';\r\n\r\nDataGridBasic.propTypes = {\r\n  data: PropTypes.array,\r\n  columns:PropTypes.array,\r\n};\r\n\r\nexport default function DataGridBasic({ data , columns }) {\r\n  return (\r\n    <DataGrid\r\n      disableSelectionOnClick\r\n      rows={data}\r\n      columns={columns}\r\n      pagination\r\n      components={{\r\n        Toolbar: GridToolbar,\r\n      }}\r\n      slots={{ toolbar: GridToolbar }} \r\n    />\r\n  );\r\n}\r\n","import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n","import * as Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.rawValues ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"],"names":["getDialogActionsUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","DialogActionsRoot","styled","name","overridesResolver","props","styles","ownerState","root","disableSpacing","spacing","_extends","display","alignItems","padding","justifyContent","flex","marginLeft","React","inProps","ref","useDefaultProps","className","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","ConfirmDialog","confirmDialog","setConfirmDialog","Dialog","open","isOpen","DialogTitle","title","DialogContent","Typography","variant","subTitle","Button","onClick","onConfirm","termsURL","API_URL","fetchTerms","dispatch","setLoading","options","ApiService","fetchTermsData","then","res","fetchTermsSuccess","data","catch","error","fetchTermsError","message","addTerms","addTermsData","addTermsSuccess","operationError","updateTerms","id","updateTermsData","updateTermsSuccess","deleteTerms","deleteTermsData","deleteTermsSuccess","Schema","Yup","shape","required","content","handleClose","currentRow","useDispatch","defaultValues","methods","useForm","resolver","yupResolver","handleSubmit","isSubmitting","reset","formState","onSubmit","values","console","log","_id","onClose","FormProvider","Stack","p","label","fullWidth","multiline","rows","direction","type","loading","initialValues","createdAt","updatedAt","useState","setCurrentRow","termsData","setTermsData","isModelOpen","setIsModelOpen","terms","useSelector","state","useEffect","length","formattedData","map","item","TermsColumn","field","headerName","width","renderCell","row","icon","handleEditClick","handleDeleteClick","event","stopPropagation","onDelete","Box","DataGridBasic","columns","getRowId","TermsPage","themeStretch","useSettingsContext","Container","maxWidth","Card","CardHeader","sx","mb","height","disableSelectionOnClick","pagination","components","Toolbar","GridToolbar","toolbar","setCustomValidity","fieldPath","errors","get","reportValidity","validateFieldsNatively","fields","refs","forEach","toNestError","shouldUseNativeValidation","fieldErrors","path","set","Object","assign","schema","schemaOptions","resolverOptions","context","mode","abortEarly","result","rawValues","e","inner","validateAllFieldCriteria","criteriaMode","reduce","previous","types","messages","appendErrors","concat"],"sourceRoot":""}