{"version":3,"file":"static/js/736.646dde1e.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/DialogActions/dialogActionsClasses.js","../node_modules/@mui/material/DialogActions/DialogActions.js","components/animate/ConFirmDialog.js","sections/Users/UserForm.js","sections/Users/Users.js","pages/UserPage.js","redux/Users/actions.js","sections/mui/data-grid/DataGridBasic.js","../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","../node_modules/@hookform/resolvers/src/toNestError.ts","../node_modules/@hookform/resolvers/yup/src/yup.ts"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getDialogActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogActions', slot);\n}\nconst dialogActionsClasses = generateUtilityClasses('MuiDialogActions', ['root', 'spacing']);\nexport default dialogActionsClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"disableSpacing\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getDialogActionsUtilityClass } from './dialogActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disableSpacing\n  } = ownerState;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getDialogActionsUtilityClass, classes);\n};\nconst DialogActionsRoot = styled('div', {\n  name: 'MuiDialogActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8,\n  justifyContent: 'flex-end',\n  flex: '0 0 auto'\n}, !ownerState.disableSpacing && {\n  '& > :not(style) ~ :not(style)': {\n    marginLeft: 8\n  }\n}));\nconst DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDialogActions'\n  });\n  const {\n      className,\n      disableSpacing = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disableSpacing\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogActions.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogActions;","import PropTypes from 'prop-types';\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Typography, Button } from '@mui/material';\r\n\r\nexport default function ConfirmDialog(props) {\r\n  const { confirmDialog, setConfirmDialog } = props;\r\n  return (\r\n    <Dialog open={confirmDialog.isOpen}>\r\n      <DialogTitle>{confirmDialog.title}</DialogTitle>\r\n      <DialogContent>\r\n        <Typography variant=\"h6\">{confirmDialog.subTitle}</Typography>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })}>No</Button>\r\n        <Button onClick={confirmDialog.onConfirm}>Yes</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nConfirmDialog.propTypes = {\r\n  confirmDialog: PropTypes.shape({\r\n    isOpen: PropTypes.bool.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    subTitle: PropTypes.string.isRequired,\r\n    onConfirm: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  setConfirmDialog: PropTypes.func.isRequired,\r\n};\r\n\r\n","import { yupResolver } from '@hookform/resolvers/yup';\r\nimport { Button, Stack } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as Yup from 'yup';\r\nimport { DialogAnimate } from '../../components/animate';\r\nimport { RHFTextField ,RHFSelect} from '../../components/hook-form';\r\nimport FormProvider from '../../components/hook-form/FormProvider';\r\nimport { updateUser, addUser } from '../../redux/Users/actions';\r\n\r\nconst Schema = Yup.object().shape({\r\n  name: Yup.string().required('Name is required'),\r\n  email: Yup.string().email('Invalid email').required('Email is required'),\r\n  role: Yup.string().required('Role is required'),\r\n});\r\n\r\nconst statuses = [\r\n    { id: 'Admin', title: 'Admin' },\r\n    { id: 'FinancialAdviser', title: 'FinancialAdviser' },\r\n    { id: 'User', title: 'User' },\r\n  ];\r\n\r\nconst UserForm = ({ handleClose, currentRow }) => {\r\n  const defaultValues = currentRow;\r\n  const dispatch = useDispatch();\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(Schema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n  } = methods;\r\n\r\n  const onSubmit = (data) => {\r\n    const userData = {\r\n      name: data.name,\r\n      email: data.email,\r\n      role: data.role,\r\n    };\r\n    if (data._id) {\r\n      userData._id = data._id;\r\n      dispatch(updateUser(data._id, userData));\r\n    } else {\r\n      dispatch(addUser(userData));\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DialogAnimate\r\n        onClose={handleClose}\r\n        title={currentRow._id ? 'Update User' : 'Add User'}\r\n      >\r\n        <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n          <Stack spacing={3} className=\"css-1lwbda4-MuiStack-root\">\r\n            <RHFTextField name=\"name\" label=\"Name *\" autoFocus />\r\n            <RHFTextField name=\"email\" label=\"Email *\" />\r\n            <RHFSelect name=\"role\" label=\"Role *\" options={statuses} />\r\n\r\n          </Stack>\r\n          <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\" p={3}>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button type=\"submit\" variant=\"contained\">\r\n          {currentRow._id ? 'Update' : 'Save'}\r\n          </Button>\r\n          </Stack>\r\n        </FormProvider>\r\n      </DialogAnimate>\r\n    </>\r\n  );\r\n};\r\n\r\nUserForm.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  currentRow: PropTypes.shape({\r\n    _id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    email: PropTypes.string,\r\n    role: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default UserForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Box, Button } from '@mui/material';\r\nimport UserForm from './UserForm';\r\nimport DataGridBasic from '../mui/data-grid/DataGridBasic';\r\nimport Iconify from '../../components/iconify';\r\nimport { fetchUsers, deleteUser } from '../../redux/Users/actions';\r\nimport ConfirmDialog from '../../components/animate/ConFirmDialog';\r\n\r\nconst initialValues = {\r\n  _id: '',\r\n  name: '',\r\n  email: '',\r\n  role: '',\r\n};\r\n\r\nconst User = () => {\r\n  const [currentRow, setCurrentRow] = useState(initialValues);\r\n  const [userData, setUserData] = useState([]);\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const [confirmDialog, setConfirmDialog] = useState({\r\n    isOpen: false,\r\n    title: '',\r\n    subTitle: '',\r\n  });\r\n\r\n  const users = useSelector((state) => state.users.users);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchUsers());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (users && users.length > 0) {\r\n      const formattedData = users.map((item) => ({\r\n        id: item._id,\r\n        _id: item._id,\r\n        name: item.name,\r\n        email: item.email,\r\n        role: item.role,\r\n      }));\r\n      setUserData(formattedData);\r\n    }\r\n  }, [users]);\r\n\r\n  const handleClose = () => {\r\n    setIsModelOpen(false);\r\n  };\r\n\r\n//   const handleClickOpen = () => {\r\n//     setIsModelOpen(true);\r\n//     setCurrentRow(initialValues);\r\n//   };\r\n\r\n  const UserColumn = [\r\n    { field: 'name', headerName: 'Name', width: 200 },\r\n    { field: 'email', headerName: 'Email', width: 250 },\r\n    { field: 'role', headerName: 'Role', width: 150 },\r\n    {\r\n      field: 'action',\r\n      headerName: 'Action',\r\n      width: 100,\r\n      renderCell: ({ row }) => (\r\n        <strong>\r\n          {row.role !== \"FinancialAdviser\" && <Iconify icon=\"akar-icons:edit\" onClick={handleEditClick(row)} /> }\r\n          <Iconify icon=\"ant-design:delete-outlined\" onClick={handleDeleteClick(row)} />\r\n        </strong>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const onDelete = (row) => {\r\n    setConfirmDialog({ ...confirmDialog, isOpen: false });\r\n    dispatch(deleteUser(row._id));\r\n    setIsModelOpen(false);\r\n  };\r\n\r\n  const handleDeleteClick = (row) => (event) => {\r\n    event.stopPropagation();\r\n    setConfirmDialog({\r\n        isOpen: true,\r\n        title: 'Are you sure you want to delete this record?',\r\n        subTitle: \"You can't undo this operation\",\r\n        onConfirm: () => onDelete(row),\r\n    });\r\n  };\r\n\r\n  const handleEditClick = (row) => (event) => {\r\n    event.stopPropagation();\r\n    setCurrentRow(row);\r\n    setIsModelOpen(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box display=\"flex\" justifyContent=\"flex-end\" p={1}>\r\n        {/* <Button type=\"button\" onClick={handleClickOpen} className=\"add-btn\">\r\n          Add User\r\n        </Button> */}\r\n      </Box>\r\n      <div className=\"main-table\">\r\n        {userData.length > 0 && (\r\n          <DataGridBasic data={userData} columns={UserColumn} getRowId={(row) => row.id} />\r\n        )}\r\n      </div>\r\n      {isModelOpen && <UserForm handleClose={handleClose} currentRow={currentRow} />}\r\n      {confirmDialog.isOpen && (\r\n        <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default User;\r\n\r\n","import { Box, Card, CardHeader, Container, Stack } from '@mui/material';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { useSettingsContext } from '../components/settings';\r\nimport User from '../sections/Users/Users';\r\n\r\nexport default function UserPage() {\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Page Six </title>\r\n      </Helmet>\r\n      <Container maxWidth={themeStretch ? false : 'xl'}>\r\n        <Stack spacing={5}>\r\n          <Card>\r\n            <CardHeader title=\"Custom\" sx={{ mb: 2 }} />\r\n            <Box sx={{ height: 390 }}>\r\n              <User />\r\n            </Box>\r\n          </Card>\r\n        </Stack>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import { fetchUsersData, addUserData, updateUserData, deleteUserData } from '../../services/UsersService';\r\nimport {\r\n  fetchUsersSuccess,\r\n  fetchUsersError,\r\n  setLoading,\r\n  addUserSuccess,\r\n  updateUserSuccess,\r\n  deleteUserSuccess,\r\n  operationError,\r\n} from './Users';\r\n\r\nexport const fetchUsers = () => (dispatch) => {\r\n  dispatch(setLoading());\r\n  fetchUsersData()\r\n    .then((res) => {\r\n      dispatch(fetchUsersSuccess(res.data));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(fetchUsersError(error.message));\r\n    });\r\n};\r\n\r\nexport const addUser = (data) => (dispatch) => {\r\n  dispatch(setLoading());\r\n  addUserData(data)\r\n    .then((res) => {\r\n      dispatch(addUserSuccess(res.data));\r\n      dispatch(fetchUsers());\r\n    })\r\n    .catch((error) => {\r\n      dispatch(operationError(error.message));\r\n    });\r\n};\r\n\r\nexport const updateUser = (id, data) => (dispatch) => {\r\n  dispatch(setLoading());\r\n  updateUserData(id, data)\r\n    .then((res) => {\r\n      dispatch(updateUserSuccess(res.data));\r\n      dispatch(fetchUsers());\r\n    })\r\n    .catch((error) => {\r\n      dispatch(operationError(error.message));\r\n    });\r\n};\r\n\r\nexport const deleteUser = (id) => (dispatch) => {\r\n  dispatch(setLoading());\r\n  deleteUserData(id)\r\n    .then(() => {\r\n      dispatch(deleteUserSuccess(id));\r\n      dispatch(fetchUsers());\r\n    })\r\n    .catch((error) => {\r\n      dispatch(operationError(error.message));\r\n    });\r\n};\r\n","import { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\nimport PropTypes from 'prop-types';\r\n\r\nDataGridBasic.propTypes = {\r\n  data: PropTypes.array,\r\n  columns:PropTypes.array,\r\n};\r\n\r\nexport default function DataGridBasic({ data , columns }) {\r\n  return (\r\n    <DataGrid\r\n      disableSelectionOnClick\r\n      rows={data}\r\n      columns={columns}\r\n      pagination\r\n      components={{\r\n        Toolbar: GridToolbar,\r\n      }}\r\n      slots={{ toolbar: GridToolbar }} \r\n    />\r\n  );\r\n}\r\n","import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n","import * as Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.rawValues ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"],"names":["getDialogActionsUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","DialogActionsRoot","styled","name","overridesResolver","props","styles","ownerState","root","disableSpacing","spacing","_extends","display","alignItems","padding","justifyContent","flex","marginLeft","React","inProps","ref","useDefaultProps","className","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","ConfirmDialog","confirmDialog","setConfirmDialog","Dialog","open","isOpen","DialogTitle","title","DialogContent","Typography","variant","subTitle","Button","onClick","onConfirm","Schema","Yup","shape","required","email","role","statuses","id","handleClose","currentRow","defaultValues","dispatch","useDispatch","methods","useForm","resolver","yupResolver","handleSubmit","onClose","_id","FormProvider","onSubmit","data","userData","updateUser","addUser","Stack","label","autoFocus","options","direction","p","type","initialValues","useState","setCurrentRow","setUserData","isModelOpen","setIsModelOpen","users","useSelector","state","useEffect","fetchUsers","length","formattedData","map","item","UserColumn","field","headerName","width","renderCell","row","icon","handleEditClick","handleDeleteClick","event","stopPropagation","deleteUser","onDelete","Box","DataGridBasic","columns","getRowId","UserPage","themeStretch","useSettingsContext","Container","maxWidth","Card","CardHeader","sx","mb","height","setLoading","fetchUsersData","then","res","fetchUsersSuccess","catch","error","fetchUsersError","message","addUserData","addUserSuccess","operationError","updateUserData","updateUserSuccess","deleteUserData","deleteUserSuccess","disableSelectionOnClick","rows","pagination","components","Toolbar","GridToolbar","toolbar","setCustomValidity","fieldPath","errors","get","reportValidity","validateFieldsNatively","fields","refs","forEach","toNestError","shouldUseNativeValidation","fieldErrors","path","set","Object","assign","schema","schemaOptions","resolverOptions","values","context","mode","abortEarly","result","rawValues","e","inner","validateAllFieldCriteria","criteriaMode","reduce","previous","types","messages","appendErrors","concat"],"sourceRoot":""}